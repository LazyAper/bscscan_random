#!venv/bin/python
import logging
import config
import asyncio
import random
import randomizer as rz
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import BoundFilter

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


class MyFilter(BoundFilter):
    key = 'is_admin'

    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message: types.Message):
        if message.from_user.is_bot == True or message.from_user.first_name == 'Group':
            return True


def get_info_about_user(message):
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {message.from_user.id}, Text: {message.text}'
    try:
        text += f'\nUsername: {message.from_user.username},' \
                f' Name: {message.from_user.first_name},' \
                f' Surname: {message.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


def to_fixed(number, digits=0):
    return f"{number:.{digits}f}"


dp.filters_factory.bind(MyFilter)


@dp.message_handler(is_admin=True, commands='test')
async def cmd_test(message: types.Message):
    print(message)
    print(get_info_about_user(message))
    await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')


# @dp.message_handler(commands='test')
# async def cmd_test(message: types.Message):
#     print(message)
#     await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')


@dp.message_handler(is_admin=True, commands="start")
async def cmd_start(message: types.Message):
    print(get_info_about_user(message))
    await message.reply("–ü—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç, –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ (Menu)\n\n"
                        "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º –Ω–∞ —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏ BEP-20 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
                        "üí≥0x3FD025ac173954778251699dacB2Ca126932841Füí≥\n\n"
                        "–ü–æ–∑–∂–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –∫–æ—à–µ–ª—å–∫–∞ –∏ –¥–∞—Ç—ã")


@dp.message_handler(is_admin=True, commands="users")
async def cmd_users(message: types.Message):
    print(get_info_about_user(message))
    await rz.get_transactions(config.address)
    text = ''
    cnt = 1
    for i in rz.scans:
        if i[0] not in text and i[0] != '0x0000000000000000000000000000000000000000':
            text += f'{str(cnt)}. {i[0]}\n'
            cnt += 1
    await message.answer(f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ —É—á–∞—Å—Ç–≤—É–µ—Ç {cnt - 1} —á–µ–ª–æ–≤–µ–∫')


@dp.message_handler(is_admin=True, commands="last")
async def cmd_last(message: types.Message):
    print(get_info_about_user(message))
    await rz.get_transactions(config.address)
    text = ''
    user = rz.scans[-1]
    text += '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüîö\n\n'
    text += f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{user[0]}üí≥ \n\n'
    text += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[1]}$ \n'
    text += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[3]} \n'
    await message.answer(text)


@dp.message_handler(is_admin=True, commands="check")  # –°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ—à–µ–ª—å–∫—É
async def cmd_check(message: types.Message):
    print(get_info_about_user(message))
    if message.get_args():
        await rz.get_transactions(config.address)
        text = ''
        found = False
        for i in rz.scans:
            if message.get_args().lower() in i:
                text += f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{i[0]}üí≥ \n\n'
                text += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {i[1]}$ \n'
                text += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {i[3]} \n'
                found = True
                await message.answer(text)
            text = ''
        if not found:
            await message.answer('–¢–∞–∫–æ–π –∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(is_admin=True, commands="users_list")
async def cmd_users_list(message: types.Message):
    print(get_info_about_user(message))
    await message.answer('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...')
    await rz.get_transactions(config.address)
    text = ''
    cnt = 1
    for i in rz.scans:
        if i[0] not in text and i[0] != '0x0000000000000000000000000000000000000000':
            text += f'{str(cnt)}. {i[0]}\n'
            cnt += 1
    with open("users.txt", "w") as f:
        f.write(text[:-1])
    await message.answer_document(open('users.txt', 'rb'))

    await message.answer('–§–∞–π–ª —Å–æ–±—Ä–∞–Ω')


@dp.message_handler(is_admin=True, commands="random")
async def cmd_random(message: types.Message):
    print(get_info_about_user(message))
    await message.answer('–ö–†–£–¢–ò–ú –ë–ê–†–ê–ë–ê–ù')
    await asyncio.sleep(1)
    await message.answer('–ì–∞–¥–∞–µ–º –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö üìä')
    await asyncio.sleep(1)
    await message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üåñ')
    await asyncio.sleep(1)
    await message.answer('–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤üõ∞')
    await rz.get_transactions(config.address)
    await message.answer('–î–æ–±–∞–≤–ª–µ–º –Ω–µ–º–Ω–æ–≥–æ —É–¥–∞—á–∏ —Å–æ —Å–ª–æ—Ç–æ–≤üé∞')
    await message.answer_dice('üé∞')
    await asyncio.sleep(3)
    seed = random.randint(10000000, 99999999)
    random.seed(seed)
    users = []
    for i in rz.scans:
        if i[0] not in users and i[0] != '0x0000000000000000000000000000000000000000':
            users.append(i[0])
    num = random.randint(0, len(users) + 1)
    await message.answer(f'–í–∞—à–µ —á–∏—Å–ª–æ: {num}\n–°–∏–¥ —Ä–∞–Ω–¥–æ–º–∞: {seed}')
    await asyncio.sleep(1)
    await message.answer(f'–ò—â–µ–º {num}-–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    await asyncio.sleep(1)
    user = []
    for j in rz.scans:
        if users[num - 1] == j[0]:
            user = j
    winner = f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{user[0]}üí≥ \n\n'
    winner += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[1]}$ \n'
    winner += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[3]} \n'
    await message.answer(winner)
    text = ''
    cnt = 1
    for i in rz.scans:
        if i[0] not in text and i[0] != '0x0000000000000000000000000000000000000000':
            text += f'{str(cnt)}. Address: {i[0]} | Value: {str(to_fixed(float(i[1]), 2))}$ | Date: {i[3]}\n'
            cnt += 1
    with open("users.txt", "w") as f:
        f.write(text[:-1])
    await message.answer_document(open('users.txt', 'rb'))
    print(f'\n–í–∞—à–µ —á–∏—Å–ª–æ: {num}\n–°–∏–¥ —Ä–∞–Ω–¥–æ–º–∞: {seed}')
    print(winner)


@dp.message_handler(is_admin=True, commands="seed")
async def cmd_seed(message: types.Message):
    print(get_info_about_user(message))
    if message.get_args():
        await rz.get_transactions(config.address)
        users = []
        for i in rz.scans:
            if i[0] not in users and i[0] != '0x0000000000000000000000000000000000000000':
                users.append(i[0])
        random.seed(int(message.get_args()))
        await message.answer(str(random.randint(0, len(users))))
    else:
        await message.answer('–ù–µ –∑–∞–¥–∞–Ω –∞–¥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /seed')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
