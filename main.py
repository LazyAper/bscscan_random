#!venv/bin/python
import logging
import config
import random
import asyncio
import randomizer as rz
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç, –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ (Menu)\n\n"
                        "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º –Ω–∞ —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
                        "üí≥0x3FD025ac173954778251699dacB2Ca126932841Füí≥\n\n"
                        "–ü–æ–∑–∂–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –∫–æ—à–µ–ª—å–∫–∞ –∏ –¥–∞—Ç—ã")


@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    num1 = await message.answer_dice()
    num2 = await message.answer_dice()
    await asyncio.sleep(5)
    if num1.dice.value + num2.dice.value <= 9:
        await message.answer(f'–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ {(num1.dice.value + num2.dice.value)}')
    else:
        await message.answer('–°—É–º–º–∞ –±–æ–ª—å—à–µ 9-—Ç–∏, –ø–µ—Ä–µ–±—Ä–æ—Å –∫—É–±–∏–∫–∞')


@dp.message_handler(commands="users")
async def cmd_users(message: types.Message):
    await rz.get_transactions()
    await message.answer(f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ —É—á–∞—Å—Ç–≤—É–µ—Ç {rz.users} —á–µ–ª–æ–≤–µ–∫')


@dp.message_handler(commands="last")
async def cmd_last(message: types.Message):
    await rz.get_transactions()
    text = ''
    user = rz.scans[-1]
    text += '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüîö\n\n'
    text += f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{user[0]}üí≥ \n\n'
    text += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[1]}$ \n'
    text += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[3]} \n'
    await message.answer(text)


@dp.message_handler(commands="check")  # –°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ—à–µ–ª—å–∫—É
async def cmd_check(message: types.Message):
    if message.get_args():
        await rz.get_transactions()
        text = ''
        found = False
        for i in rz.scans:
            if message.get_args().lower() in i:
                text += f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{i[0]}üí≥ \n\n'
                text += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {i[1]}$ \n'
                text += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {i[3]} \n'
                found = True
                await message.answer(text)
        if not found:
            await message.answer('–¢–∞–∫–æ–π –∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(commands="users_list")
async def cmd_users_list(message: types.Message):
    await rz.get_transactions()
    text = ''
    await message.answer('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...')
    for i in rz.scans:
        if i[0] not in text:
            text += i[0] + '\n'
    with open("users.txt", "w") as f:
        f.write(text)

    await message.answer_document(open('users.txt', 'rb'))

    await message.answer('–§–∞–π–ª —Å–æ–±—Ä–∞–Ω')


# @dp.message_handler(commands="random")
# async def cmd_random(message: types.Message):
#     if message.get_args():
#         await message.answer(message.get_args())
#     else:
#         await rz.get_transactions()
#         text = ''
#         user = rz.scans[random.randint(0, rz.users)]
#         text += 'ü•á–ü–æ–±–µ–¥–∏—Ç–µ–ª—åü•á\n\n'
#         text += f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüí≥{user[0]}üí≥ \n\n'
#         text += f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[1]}$ \n'
#         text += f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {user[3]} \n'
#         await message.answer(text)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
